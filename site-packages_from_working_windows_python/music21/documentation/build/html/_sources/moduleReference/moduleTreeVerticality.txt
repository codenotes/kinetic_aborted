.. _moduleTreeVerticality:

music21.tree.verticality
========================

.. WARNING: DO NOT EDIT THIS FILE:
   AUTOMATICALLY GENERATED.
   PLEASE EDIT THE .py FILE DIRECTLY.

.. automodule:: music21.tree.verticality

Verticality
-----------

.. autoclass:: music21.tree.verticality.Verticality

.. rubric:: :class:`~music21.tree.verticality.Verticality` read-only properties

.. autoattribute:: music21.tree.verticality.Verticality.bassTimespan

.. autoattribute:: music21.tree.verticality.Verticality.beatStrength

.. autoattribute:: music21.tree.verticality.Verticality.isConsonant

.. autoattribute:: music21.tree.verticality.Verticality.measureNumber

.. autoattribute:: music21.tree.verticality.Verticality.nextStartOffset

.. autoattribute:: music21.tree.verticality.Verticality.nextVerticality

.. autoattribute:: music21.tree.verticality.Verticality.pitchClassSet

.. autoattribute:: music21.tree.verticality.Verticality.pitchSet

.. autoattribute:: music21.tree.verticality.Verticality.previousVerticality

.. rubric:: :class:`~music21.tree.verticality.Verticality` methods

.. automethod:: music21.tree.verticality.Verticality.getAllVoiceLeadingQuartets

.. automethod:: music21.tree.verticality.Verticality.getPairedMotion

.. automethod:: music21.tree.verticality.Verticality.makeElement

.. automethod:: music21.tree.verticality.Verticality.toChord

.. rubric:: :class:`~music21.tree.verticality.Verticality` instance variables

.. attribute:: Verticality.offset

	
	Gets the start offset of a verticality.
	
	>>> score = corpus.parse('bwv66.6')
	>>> scoreTree = tree.fromStream.asTimespans(score, flatten=True,
	...            classList=(note.Note, chord.Chord))
	>>> verticality = scoreTree.getVerticalityAt(1.0)
	>>> verticality
	<Verticality 1.0 {F#3 C#4 F#4 A4}>
	>>> verticality.offset
	1.0
	

.. attribute:: Verticality.overlapTimespans

	
	Gets timespans overlapping the start offset of a verticality.
	
	>>> score = corpus.parse('bwv66.6')
	>>> scoreTree = tree.fromStream.asTimespans(score, flatten=True,
	...            classList=(note.Note, chord.Chord))
	>>> verticality = scoreTree.getVerticalityAt(0.5)
	>>> verticality
	<Verticality 0.5 {G#3 B3 E4 B4}>
	>>> verticality.overlapTimespans
	(<PitchedTimespan (0.0 to 1.0) <music21.note.Note E>>,)
	

.. attribute:: Verticality.startTimespans

	
	Gets the timespans starting at a verticality's start offset.
	
	>>> score = corpus.parse('bwv66.6')
	>>> scoreTree = tree.fromStream.asTimespans(score, flatten=True,
	...            classList=(note.Note, chord.Chord))
	>>> verticality = scoreTree.getVerticalityAt(1.0)
	>>> verticality
	<Verticality 1.0 {F#3 C#4 F#4 A4}>
	>>> for timespan in verticality.startTimespans:
	...     timespan
	...
	<PitchedTimespan (1.0 to 2.0) <music21.note.Note A>>
	<PitchedTimespan (1.0 to 2.0) <music21.note.Note F#>>
	<PitchedTimespan (1.0 to 2.0) <music21.note.Note C#>>
	<PitchedTimespan (1.0 to 2.0) <music21.note.Note F#>>
	

.. attribute:: Verticality.stopTimespans

	
	Gets the timespans stopping at a verticality's start offset.
	
	>>> score = corpus.parse('bwv66.6')
	>>> scoreTree = tree.fromStream.asTimespans(score, flatten=True,
	...                classList=(note.Note, chord.Chord))
	>>> verticality = scoreTree.getVerticalityAt(1.0)
	>>> verticality
	<Verticality 1.0 {F#3 C#4 F#4 A4}>
	
	Note that none of the elements in the stopTimespans are listed in
	the repr for the Verticality
	
	>>> for timespan in verticality.stopTimespans:
	...     timespan
	...
	<PitchedTimespan (0.0 to 1.0) <music21.note.Note E>>
	<PitchedTimespan (0.5 to 1.0) <music21.note.Note B>>
	<PitchedTimespan (0.5 to 1.0) <music21.note.Note B>>
	<PitchedTimespan (0.5 to 1.0) <music21.note.Note G#>>
	

.. attribute:: Verticality.timespanTree

	
	Returns the timespanTree initially set.
	

VerticalitySequence
-------------------

.. autoclass:: music21.tree.verticality.VerticalitySequence

.. rubric:: :class:`~music21.tree.verticality.VerticalitySequence` methods

.. automethod:: music21.tree.verticality.VerticalitySequence.unwrap
