/* Auto-generated by genmsg_cpp for file C:\ros\kintetic\ROSPyTesting\gregtestmsg.msg */
#ifndef ROSPYTESTING_MESSAGE_GREGTESTMSG_H
#define ROSPYTESTING_MESSAGE_GREGTESTMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


UNREAL CLASS HEADER STUFF

namespace ROSPyTesting
{
template <class ContainerAllocator>
struct gregtestmsg_ {
  typedef gregtestmsg_<ContainerAllocator> Type;

  gregtestmsg_()
  : booby()
  , goog(0)
  {
  }

  gregtestmsg_(const ContainerAllocator& _alloc)
  : booby(_alloc)
  , goog(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _booby_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  booby;

  typedef int32_t _goog_type;
  int32_t goog;


  typedef boost::shared_ptr< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ROSPyTesting::gregtestmsg_<ContainerAllocator>  const> ConstPtr;
}; // struct gregtestmsg
typedef  ::ROSPyTesting::gregtestmsg_<std::allocator<void> > gregtestmsg;

typedef boost::shared_ptr< ::ROSPyTesting::gregtestmsg> gregtestmsgPtr;
typedef boost::shared_ptr< ::ROSPyTesting::gregtestmsg const> gregtestmsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ROSPyTesting::gregtestmsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ROSPyTesting

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ROSPyTesting::gregtestmsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89d504532aa5bde6421b191d69e5faee";
  }

  static const char* value(const  ::ROSPyTesting::gregtestmsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x89d504532aa5bde6ULL;
  static const uint64_t static_value2 = 0x421b191d69e5faeeULL;
};

template<class ContainerAllocator>
struct DataType< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ROSPyTesting/gregtestmsg";
  }

  static const char* value(const  ::ROSPyTesting::gregtestmsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string booby\n\
int32 goog\n\
#Vector3 vv\n\
";
  }

  static const char* value(const  ::ROSPyTesting::gregtestmsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.booby);
    stream.next(m.goog);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct gregtestmsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ROSPyTesting::gregtestmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ROSPyTesting::gregtestmsg_<ContainerAllocator> & v) 
  {
    s << indent << "booby: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.booby);
    s << indent << "goog: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goog);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSPYTESTING_MESSAGE_GREGTESTMSG_H

